/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DonationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admistrator"
      | "afterFee"
      | "amountRequesting"
      | "campaignEndTime"
      | "campaignIpfs"
      | "campaignOpen"
      | "campaignReceiver"
      | "campaignSuccess"
      | "closeCampaign"
      | "divisionFee"
      | "donate"
      | "donations"
      | "donators"
      | "getUserDonations"
      | "missingBalanceToTarget"
      | "refund"
      | "withdrawDonations"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CampaignEnded" | "Donation" | "UnknownDonation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "admistrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "amountRequesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignIpfs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignSuccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "divisionFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "donators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDonations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "missingBalanceToTarget",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDonations",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "admistrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountRequesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignIpfs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divisionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "missingBalanceToTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDonations",
    data: BytesLike
  ): Result;
}

export namespace CampaignEndedEvent {
  export type InputTuple = [campaignAddress: AddressLike];
  export type OutputTuple = [campaignAddress: string];
  export interface OutputObject {
    campaignAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnknownDonationEvent {
  export type InputTuple = [amountToWithdraw: BigNumberish];
  export type OutputTuple = [amountToWithdraw: bigint];
  export interface OutputObject {
    amountToWithdraw: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DonationContract extends BaseContract {
  connect(runner?: ContractRunner | null): DonationContract;
  waitForDeployment(): Promise<this>;

  interface: DonationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admistrator: TypedContractMethod<[], [string], "view">;

  afterFee: TypedContractMethod<
    [amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  amountRequesting: TypedContractMethod<[], [bigint], "view">;

  campaignEndTime: TypedContractMethod<[], [bigint], "view">;

  campaignIpfs: TypedContractMethod<[], [string], "view">;

  campaignOpen: TypedContractMethod<[], [boolean], "view">;

  campaignReceiver: TypedContractMethod<[], [string], "view">;

  campaignSuccess: TypedContractMethod<[], [boolean], "view">;

  closeCampaign: TypedContractMethod<[], [void], "nonpayable">;

  divisionFee: TypedContractMethod<[], [bigint], "view">;

  donate: TypedContractMethod<[], [void], "payable">;

  donations: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  donators: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getUserDonations: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    "view"
  >;

  missingBalanceToTarget: TypedContractMethod<[], [bigint], "view">;

  refund: TypedContractMethod<[], [void], "nonpayable">;

  withdrawDonations: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admistrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "afterFee"
  ): TypedContractMethod<[amount: BigNumberish], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "amountRequesting"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignIpfs"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "campaignReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignSuccess"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeCampaign"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "divisionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "donators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUserDonations"
  ): TypedContractMethod<[wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "missingBalanceToTarget"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawDonations"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CampaignEnded"
  ): TypedContractEvent<
    CampaignEndedEvent.InputTuple,
    CampaignEndedEvent.OutputTuple,
    CampaignEndedEvent.OutputObject
  >;
  getEvent(
    key: "Donation"
  ): TypedContractEvent<
    DonationEvent.InputTuple,
    DonationEvent.OutputTuple,
    DonationEvent.OutputObject
  >;
  getEvent(
    key: "UnknownDonation"
  ): TypedContractEvent<
    UnknownDonationEvent.InputTuple,
    UnknownDonationEvent.OutputTuple,
    UnknownDonationEvent.OutputObject
  >;

  filters: {
    "CampaignEnded(address)": TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;
    CampaignEnded: TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;

    "Donation(address,uint256)": TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;
    Donation: TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;

    "UnknownDonation(uint256)": TypedContractEvent<
      UnknownDonationEvent.InputTuple,
      UnknownDonationEvent.OutputTuple,
      UnknownDonationEvent.OutputObject
    >;
    UnknownDonation: TypedContractEvent<
      UnknownDonationEvent.InputTuple,
      UnknownDonationEvent.OutputTuple,
      UnknownDonationEvent.OutputObject
    >;
  };
}
